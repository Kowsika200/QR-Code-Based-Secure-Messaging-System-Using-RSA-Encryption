# -*- coding: utf-8 -*-
"""cs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ksQDVC6r_dmJPbcYeEBDeHInmWnFu4bR
"""

import os
import base64
import streamlit as st
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.fernet import Fernet
import qrcode
from io import BytesIO
import cv2
import numpy as np

# ---------------- Key setup ----------------
PRIVATE_KEY_FILE = "private_key.pem"
PUBLIC_KEY_FILE = "public_key.pem"

def generate_rsa_keys():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    public_key = private_key.public_key()
    with open(PRIVATE_KEY_FILE, "wb") as f:
        f.write(private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ))
    with open(PUBLIC_KEY_FILE, "wb") as f:
        f.write(public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ))
    return private_key, public_key

def load_or_create_keys():
    if os.path.exists(PRIVATE_KEY_FILE) and os.path.exists(PUBLIC_KEY_FILE):
        with open(PRIVATE_KEY_FILE, "rb") as f:
            private_key = serialization.load_pem_private_key(f.read(), password=None)
        with open(PUBLIC_KEY_FILE, "rb") as f:
            public_key = serialization.load_pem_public_key(f.read())
        return private_key, public_key
    else:
        return generate_rsa_keys()

private_key, public_key = load_or_create_keys()

# ---------------- Encryption ----------------
def encrypt_message(message):
    fernet_key = Fernet.generate_key()
    f = Fernet(fernet_key)
    ciphertext = f.encrypt(message.encode())

    rsa_encrypted_key = public_key.encrypt(
        fernet_key,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
    )

    payload = (
        base64.urlsafe_b64encode(rsa_encrypted_key).decode()
        + "::"
        + base64.urlsafe_b64encode(ciphertext).decode()
    )
    return payload

def decrypt_payload(payload):
    part_key_b64, part_ct_b64 = payload.split("::", 1)
    rsa_encrypted_key = base64.urlsafe_b64decode(part_key_b64)
    ciphertext = base64.urlsafe_b64decode(part_ct_b64)

    fernet_key = private_key.decrypt(
        rsa_encrypted_key,
        padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None),
    )
    f = Fernet(fernet_key)
    plaintext = f.decrypt(ciphertext).decode()
    return plaintext

# ---------------- QR utilities ----------------
def make_qr_image(data: str):
    qr = qrcode.QRCode(box_size=8, border=3)
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    return img

def read_qr_from_image(uploaded_file):
    """Decode QR code image to string"""
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    detector = cv2.QRCodeDetector()
    data, _, _ = detector.detectAndDecode(img)
    return data

# ---------------- Streamlit UI ----------------
st.set_page_config(page_title="Secure QR Encryption", page_icon="üîí", layout="centered")
st.markdown(
    """
    <style>
    body { background-color: #0f2545; }
    .stApp { background-color: #0f2545; color: white; }
    h1 { color: #89cff0; text-align: center; }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("üîí Secure QR Encryption with RSA")

tab1, tab2 = st.tabs(["üîê Encrypt Message", "üì∑ Decrypt from QR"])

# ---------------- ENCRYPT TAB ----------------
with tab1:
    message = st.text_area("Enter your message:", height=100, placeholder="Type something secret...")
    if st.button("Encrypt & Generate QR"):
        if not message.strip():
            st.warning("Please enter a message first.")
        else:
            payload = encrypt_message(message)
            qr_img = make_qr_image(payload)
            buf = BytesIO()
            qr_img.save(buf, format="PNG")
            qr_data = buf.getvalue()
            st.image(qr_data, caption="Encrypted QR", use_column_width=True)
            st.success("QR generated successfully! Save or share this image securely.")

# ---------------- DECRYPT TAB ----------------
with tab2:
    uploaded_file = st.file_uploader("Upload QR Image to decrypt", type=["png", "jpg", "jpeg"])
    if uploaded_file is not None:
        qr_text = read_qr_from_image(uploaded_file)
        if qr_text:
            try:
                decrypted = decrypt_payload(qr_text)
                st.markdown("### ‚úÖ Decrypted Message:")
                st.markdown(f"<div style='color:#f56565; font-size:18px;'>{decrypted}</div>", unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Failed to decrypt: {e}")
        else:
            st.warning("Could not detect any QR code in the uploaded image.")

